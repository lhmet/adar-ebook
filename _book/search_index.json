[
["io.html", "8 Entrada e saída de dados", " 8 Entrada e saída de dados O é capaz de importar dados de uma diversidade de fontes, formatos e tamanhos. Neste capítulo será visto como importar e exportar dados nos formatos mais comuns em aplicações ambientais, como: dados retangulares armazenados em arquivos de texto puro dados binários e netCDF dados espaciais em formato GIS Nós estamos em uma era digital e a quantidade de dados disponíveis na internet está aumentando monstruosamente. Para você estar preparado para o futuro, além de aprender como importados arquivos locais, veremos também como baixar e importar dados da web. Serão utilizados diversos pacotes para lidar com os diferentes formatos de dados. Iremos começar com o pacote rio que permite importar uma diversidade de tipos de dados com muita facilidade. Arquivos texto com valores separados por vírgula (CSV) serão tratados com os pacotes readr e data.table. Dados em formato texto puro tem desvantagens e por isso veremos também formatos binários, entre eles, as funções nativas do R (readRDS(), load()) e funções de pacotes específicos para importar arquivos no formato netCDF. "],
["pre-requisitos.html", "8.1 Pré-requisitos", " 8.1 Pré-requisitos Para reproduzir os códigos deste capítulo você precisará dos seguintes pacotes: pacotes &lt;- c(&quot;easypackages&quot;,&quot;rio&quot;, &quot;readr&quot;, &quot;feather&quot;) Para instalá-los já com as dependências utilize a instrução abaixo: install.packages( pacotes, dependencies = TRUE ) Agora você pode carregar os pacotes. library(&quot;easypackages&quot;) library(&quot;rio&quot;) library(&quot;readr&quot;) Para carregar diversos pacotes de uma vez só, você pode usar a função libraries() do pacote easypackages. Então o trecho de código anterior poderia ser substituído por: library(easypackages) libraries(pacotes) ou simplesmente easypackages::libraries(pacotes) "],
["diretorio-de-trabalho.html", "8.2 Diretório de trabalho", " 8.2 Diretório de trabalho Antes de lidar com arquivos locais, você precisa conhecer o seu diretório de trabalho; o local para o qual sua sessão do R importará ou exportará dados por default. O possui uma variedade de funções para se obter informações do sistema, como arquivos, diretórios, e etc. Uma informação importante é diretório de trabalho atual. Importar ou exportar dados é mais fácil quando você não precisa digitar caminhos longos de diretórios para os arquivos. Por isso, quando abrimos uma sessão no , ela é vinculada a um diretório de trabalho (working directory, wd). A função getwd() retorna o diretório de trabalho da sua sessão do . getwd() O local default geralmente é o home do usuário &quot;/home/usuario&quot; no linux e &quot;C:\\Usuarios\\usuario\\&quot; no Windows. Você obtém essa informação com a instrução abaixo: Sys.getenv(&quot;HOME&quot;) É neste local onde o e o RStudio irão salvar gráficos, documentos, ler e escrever dados, quando você não especificar o caminho completo para o arquivo de saída. Ocasionalmente pode ser conveniente alterar seu wd e para isso você pode usar a função setwd(). wd &lt;- getwd() # define o wd em &quot;/home/user&quot; setwd(&quot;~/Documents&quot;) getwd() # volta para o wd original setwd(wd) getwd() Você pode configurar o diretório de trabalho pelo menu do Rstudio Session &gt; Set Working Directory. Você terá as opções: To Source File Location: definirá o diretório de trabalho como o mesmo do arquivo atualmente aberto no RStudio To Files Pane Location: definirá o diretório de trabalho como aquele atualmente aberto no painel de arquivos To Files Pane Location: definirá o diretório de trabalho como o mesmo do projeto atualmente aberto no RStudio Choose Directory: permite você navegar até o diretório de interesse O conteúdo de um diretório pode ser listado com a função dir(), ou se estiver usando o Rstudio você pode clicar na aba Files do painel de direito inferior e depois em More &gt; Go To Working Directory. "],
["arquivos-texto.html", "8.3 Arquivos texto", " 8.3 Arquivos texto Dados armazenados em um arquivo de texto puro ou simples podem ser facilmente importados no R. Como o computador só armazena bits, o texto do arquivo que está na nossa linguagem escrita precisa ser convertido em bits. Essa conversão é feita por meio de um esquema codificação ou simplesmente codificação. Tradicionalmente a codificação mais usada era o ASCII (Padrão Americano de Codificação para Intercâmbio de Informação) de 8 bits (ou 1 byte) que codifica um conjunto de 128 sinais (letras, números, sinais de pontuação e símbolos matemáticos) da língua Inglesa. Por exemplo a letra R corresponde a seguinte sequência 01010010. Da necessidade de representar caracteres de outras línguas surgiram várias outras codificações. O ISO 8859-1 ou Latin 1 é um exemplo de codificação de 8 bits que permite 256 sinais diferentes, usada nas Americas, Oeste da Europa, Oceania e grande parte da África. Text is represented on computers by sequences of bytes; An encoding is used to map sequences of bytes to the written language it represents; The unicode standard is an effort to map written language to a single, standardized encoding; UTF-8 is the most common way of encoding unicode characters, but it is not the only way. O formato mais comum de armazenar dados é o retangular, ou seja, uma tabela de dados com as observações ao longo das linhas e as variáveis ao longo das colunas. As vezes as variáveis são referentes a locais diferentes em cada linha. Os valores de cada coluna de uma linha são separados por um caractere separador: vírgula, espaço, tab e etc; as linhas são separadas por quebras de linha (\\n no Linux, \\r\\n no Windows). https://leb-fmvz-usp.gitbooks.io/manipulacao-e-visualizacao-de-dados-no-r/content/04-arquivos.html Embora seja possível especificar a codificação latin1 para reconhecer caracteres do português, é preferível evitar caracteres especiais nos bancos de dados. http://kunststube.net/encoding/ https://integrada.minhabiblioteca.com.br/books/9788577808625/pageid/271 "],
["arquivos-binarios.html", "8.4 Arquivos binários", " 8.4 Arquivos binários Arquivo texto favorecem a legibilidade humana dos dados mas tem limitada precisão numérica limitada. Formatos binários diminuem substancialmente o tamanho, o tempo de leitura e escrita de arquivos. Por isso, vários softwares armazenam dados no formato binário. Existem diversas funções nativas do R para ler este formato de dados. versão completa da tabela na vinheta do pacote rio Formato Extensão Pacote de importação Pacote de exportação Instalado por default Valores separados por vírgula .csv data.table data.table Sim dados separados por tab .tsv data.table data.table Sim Excel .xls readxl Sim Excel .xlsx readxl openxlsx Sim script R .R base base Sim objetos salvos no R .RData, .rda base base Sim objetos do R serializados .rds base base Sim dados Fortran Sem extensão reconhecida utils Sim Formato de dados com largura fixa .fwf utils utils Sim dados separados por vírgula compactados com gzip .csv.gz utils utils Sim Feather R/Python interchange format .feather feather feather Não Armazenamento rápido (Fast Storage) .fst fst fst Não JSON .json jsonlite jsonlite Não Matlab .mat rmatio rmatio Não Planilha OpenDocument .ods readODS readODS Não tabelas HTML .html xml2 xml2 Não documentos XML .xml xml2 xml2 Não YAML .yml yaml yaml Não Área de transferência default é tsv clipr clipr Não planilhas Google como valores separados por vírgula library(data.table) myDT &lt;- data.table(x = c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;), y = c(1, 2, 3, 4, 5)) # Cria um data.table com vetores A, B, C A &lt;- c(1, 2, 3, 4, 5) B &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;) C &lt;- c(6, 7, 8, 9, 10) DT &lt;- data.table(a = A, b = B, c = C) DT #&gt; a b c #&gt; 1: 1 a 6 #&gt; 2: 2 b 7 #&gt; 3: 3 c 8 #&gt; 4: 4 d 9 #&gt; 5: 5 e 10 DT[ , nome_col] DT[ , b] #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; class(DT[ , b]) #&gt; [1] &quot;character&quot; is.vector(DT[ , b]) #&gt; [1] TRUE DT[ , .(nome_col)] DT[ , .(b)] #&gt; b #&gt; 1: a #&gt; 2: b #&gt; 3: c #&gt; 4: d #&gt; 5: e class(DT[ , .(b)]) #&gt; [1] &quot;data.table&quot; &quot;data.frame&quot; "],
["para-saber-mais.html", "8.5 Para saber mais", " 8.5 Para saber mais Para uma descrição mais abrangente sobre importação e exportação de dados no consulte o manual R Data Import/Export e a documentação de ajuda das funções citadas naquele documento. "]
]
