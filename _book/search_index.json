[
["io.html", "8 Entrada e saída de dados", " 8 Entrada e saída de dados O é capaz de importar dados de uma diversidade de fontes, formatos e tamanhos. Neste capítulo será visto como importar e exportar dados nos formatos mais comuns em aplicações ambientais, como: dados retangulares armazenados em arquivos de texto puro dados binários e netCDF dados espaciais em formato GIS Nós estamos em uma era digital e a quantidade de dados disponíveis na internet está aumentando monstruosamente. Para você estar preparado para o futuro, além de aprender como importados arquivos locais, veremos também como baixar e importar dados da web. Serão utilizados diversos pacotes para lidar com os diferentes formatos de dados. Iremos começar com o pacote rio que permite importar uma diversidade de tipos de dados com muita facilidade. Arquivos texto com valores separados por vírgula (CSV) serão tratados com os pacotes readr e data.table. Dados em formato texto puro tem desvantagens e por isso veremos também formatos binários, entre eles, as funções nativas do R (readRDS(), load()) e funções de pacotes específicos para importar arquivos no formato netCDF. "],
["pre-requisitos.html", "8.1 Pré-requisitos", " 8.1 Pré-requisitos Para reproduzir os códigos deste capítulo você precisará dos seguintes pacotes: pacotes &lt;- c(&quot;easypackages&quot;,&quot;rio&quot;, &quot;readr&quot;, &quot;feather&quot;) Para instalá-los já com as dependências utilize a instrução abaixo: install.packages( pacotes, dependencies = TRUE ) Agora você pode carregar os pacotes. library(&quot;easypackages&quot;) library(&quot;rio&quot;) library(&quot;readr&quot;) Para carregar diversos pacotes de uma vez só, você pode usar a função libraries() do pacote easypackages. Então o trecho de código anterior poderia ser substituído por: library(easypackages) libraries(pacotes) ou simplesmente easypackages::libraries(pacotes) Vamos instalar formatos adicionais do pacote rio. rio::install_formats() "],
["diretorio-de-trabalho.html", "8.2 Diretório de trabalho", " 8.2 Diretório de trabalho Antes de lidar com arquivos locais, você precisa conhecer o seu diretório de trabalho; o local para o qual sua sessão do R importará ou exportará dados por default. O possui uma variedade de funções para se obter informações do sistema, como arquivos, diretórios, e etc. Uma informação importante é diretório de trabalho atual. Importar ou exportar dados é mais fácil quando você não precisa digitar caminhos longos de diretórios para os arquivos. Por isso, quando abrimos uma sessão no , ela é vinculada a um diretório de trabalho (working directory, wd). A função getwd() retorna o diretório de trabalho da sua sessão do . getwd() O local default geralmente é o home do usuário &quot;/home/usuario&quot; no linux e &quot;C:\\Usuarios\\usuario\\&quot; no Windows. Você obtém essa informação com a instrução abaixo: Sys.getenv(&quot;HOME&quot;) É neste local onde o e o RStudio irão salvar gráficos, documentos, ler e escrever dados, quando você não especificar o caminho completo para o arquivo de saída. Ocasionalmente pode ser conveniente alterar seu wd e para isso você pode usar a função setwd(). wd &lt;- getwd() # define o wd em &quot;/home/user&quot; setwd(&quot;~/Documents&quot;) getwd() # volta para o wd original setwd(wd) getwd() Você pode configurar o diretório de trabalho pelo menu do Rstudio Session &gt; Set Working Directory. Você terá as opções: To Source File Location: definirá o diretório de trabalho como o mesmo do arquivo atualmente aberto no RStudio To Files Pane Location: definirá o diretório de trabalho como aquele atualmente aberto no painel de arquivos To Files Pane Location: definirá o diretório de trabalho como o mesmo do projeto atualmente aberto no RStudio Choose Directory: permite você navegar até o diretório de interesse O conteúdo de um diretório pode ser listado com a função dir(), ou se estiver usando o Rstudio você pode clicar na aba Files do painel de direito inferior e depois em More &gt; Go To Working Directory. "],
["boas-praticas-para-importacao-e-exportacao-de-dados.html", "8.3 Boas práticas para importação e exportação de dados", " 8.3 Boas práticas para importação e exportação de dados Para uma importação e exportação eficiente de dados recomenda-se (Gillespie &amp; Lovelace 2017): Mantenha o nome original dos arquivos locais baixados da internet ou copiados da fonte provedora. Isso o ajudará a rastrear a proveniência dos dados no futuro. Para um armazenamento eficinte utilize o formato binário nativo do R .Rds para importar (readRDS()) e exportar (saveRDS()) dados processados. Use funções equivalentes a read.table() dos pacotes readr ou data.table para importar arquivos de texto grandes. Use as funções file.size() e object.size() para saber o tamanho de arquivos e objetos no R e analisar como proceder se eles ficarem muito grandes. "],
["arquivos-texto.html", "8.4 Arquivos texto", " 8.4 Arquivos texto Dados armazenados em um arquivo de texto puro ou simples podem ser facilmente importados no R. O formato mais comum de armazenar dados é o retangular, ou seja, uma tabela de dados com as observações ao longo das linhas e as variáveis ao longo das colunas. As vezes as variáveis são referentes a locais diferentes em cada linha. Os valores de cada coluna de uma linha são separados por um caractere separador: vírgula, espaço, tab e etc; as linhas são separadas por quebras de linha (\\n no Linux, \\r\\n no Windows). Dados em arquivo texto podem conter caracteres latinos, como palavras com acentos no caso do Português. Para lidar com esta peculiaridade, as funções de importação de dados, possuem um argumento relacionado a codificação (encoding) dos caracteres. Arquivos texto em Português geralmente usam a codificação ISO 8859-1 ou equivalente Latin1. Portanto, para importação com formatação correta de caracteres latinos a especificação com esta codificação deve ser explícita. O R utiliza o alfabeto Unicode para identificação de caracteres. Para associação unívoca de cada caractere (de mais 1 milhão de caracteres do alfabeto Unicode) a uma sequência de bits, o R usa o esquema de codificação UTF-8. Assim, recomenda-se utilizar essa codificação de caracteres como padrão em seus códigos e na construção e aquisição de dados. No RStudio a especificação da codificação de caracteres pode ser feita através do menu: Tools &gt; Global Options &gt; Code &gt; Saving &gt; Default Text Encoding. 8.4.1 rio O pacote rio é um canivete suíço para leitura e escrita de dados nos formatos mais comuns. O pacote simplifica estes processos que são complexos para quem está iniciando no R, devido a vastidão de opções reportada no Manual de Importação e Exportação do R. Com ele você só precisa saber duas funções para importar uma variedade de formatos de arquivos (ver tabela abaixo): import() e export(). Algumas opções de formatos que podem ser importados e exportados com o rio são apresentados na tabela abaixo. Uma versão completa desta tabela está disponível na vinheta do pacote. Formato Extensão Pacote de importação Pacote de exportação Instalado por default Valores separados por vírgula .csv data.table data.table Sim dados separados por tab .tsv data.table data.table Sim Excel .xls readxl Sim Excel .xlsx readxl openxlsx Sim objetos salvos no R .RData, .rda base base Sim objetos do R serializados .rds base base Sim dados Fortran Sem extensão reconhecida utils Sim Formato de dados com largura fixa .fwf utils utils Sim Feather R/Python interchange format .feather feather feather Não Armazenamento rápido (Fast Storage) .fst fst fst Não JSON .json jsonlite jsonlite Não Matlab .mat rmatio rmatio Não Planilha OpenDocument .ods readODS readODS Não tabelas HTML .html xml2 xml2 Não documentos XML .xml xml2 xml2 Não Área de transferência default é tsv clipr clipr Não planilhas Google como valores separados por vírgula Vamos então baixar um arquivo texto de exemplo importá-lo com o pacote rio. # arquivo de exemplo disponível no GitHub hidroweb_url_file &lt;- &quot;https://raw.github.com/lhmet/adar-ufsm/master/data/CHUVAS.TXT&quot; #arquivo temporário, você pode substituir tempfile() por um caminho de seu computador, p.ex. &quot;~/Downloads/CHUVAS.TXT&quot; hidroweb_dest_file &lt;- paste0(tempfile(), &quot;.csv&quot;) download.file( url = hidroweb_url_file, destfile = hidroweb_dest_file ) hidroweb_dest_file #&gt; [1] &quot;/tmp/RtmpXqrMzI/file2490440a3b28.csv&quot; # Importa o arquivo dprec &lt;- import(hidroweb_dest_file, # se fread = TRUE (default usa função fread do pacote data.table) fread = FALSE, skip = 15, header = TRUE, sep = &quot;;&quot;, dec = &quot;,&quot;, na.strings = &quot;&quot;) str(dprec) #&gt; &#39;data.frame&#39;: 1284 obs. of 76 variables: #&gt; $ X..EstacaoCodigo : int 3054002 3054002 3054002 3054002 3054002 3054002 3054002 3054002 3054002 3054002 ... #&gt; $ NivelConsistencia : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Data : chr &quot;01/01/1934&quot; &quot;01/02/1934&quot; &quot;01/03/1934&quot; &quot;01/04/1934&quot; ... #&gt; $ TipoMedicaoChuvas : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Maxima : num NA 66.3 55 54.5 30.5 42.5 10.5 30.3 36.8 69.2 ... #&gt; $ Total : num NA 174.7 160.7 98.4 119.4 ... #&gt; $ DiaMaxima : int NA 6 9 1 29 13 6 30 19 5 ... #&gt; $ NumDiasDeChuva : int NA 10 10 4 8 11 7 8 4 7 ... #&gt; $ MaximaStatus : int 0 1 1 1 1 1 1 1 1 1 ... #&gt; $ TotalStatus : int 0 1 1 1 1 1 1 1 1 1 ... #&gt; $ NumDiasDeChuvaStatus: int 0 0 0 0 1 0 0 0 0 0 ... #&gt; $ TotalAnual : num NA NA NA NA NA NA NA NA NA NA ... #&gt; $ TotalAnualStatus : int 0 0 0 0 0 0 0 0 0 0 ... #&gt; $ Chuva01 : num NA 15.5 0 54.5 0 0 0 0 0 0 ... #&gt; $ Chuva02 : num NA 3.5 0 0 19 0 0 0 0 0 ... #&gt; $ Chuva03 : num NA 0 0 0 26.7 21.5 0 0 0 0 ... #&gt; $ Chuva04 : num NA 0 0 0 0 12.7 0 0 0 20.8 ... #&gt; $ Chuva05 : num 10.5 11.9 0 0 3.2 8.7 0 27.5 0 69.2 ... #&gt; $ Chuva06 : num 3 66.3 0 18.5 4.2 0 10.5 0 5 6.1 ... #&gt; $ Chuva07 : num 11.1 1 0 0 0 0 4 2.9 0 0 ... #&gt; $ Chuva08 : num 0 40 0 19.5 0 0 0 5.4 0 0 ... #&gt; $ Chuva09 : num 0 0 55 0 0 0 0 0 0 0 ... #&gt; $ Chuva10 : num 0 0 11.7 0 0 0 0 13.6 0 0 ... #&gt; $ Chuva11 : num 0 0 5 0 0 27.3 0 0 34.5 0 ... #&gt; $ Chuva12 : num 0 1.1 0 0 0 37.5 0 0 0 0 ... #&gt; $ Chuva13 : num 0 24.7 7.5 0 0 42.5 1.2 0 0 0 ... #&gt; $ Chuva14 : num 0 0 9.5 0 0 0 0.7 0 0 0 ... #&gt; $ Chuva15 : num 0 0 0 0 0 0 0 0 0 0 ... #&gt; $ Chuva16 : num 37.6 0 3 0 0 0 0 1.8 0 0 ... #&gt; $ Chuva17 : num 0 0 1 0 0 0 0 17 0 0 ... #&gt; $ Chuva18 : num 18.4 0 23 0 0 0 7.2 0 0 0 ... #&gt; $ Chuva19 : num 12.5 0 0 0 0 0 0 0 36.8 0 ... #&gt; $ Chuva20 : num 0 0 0 0 0 0.7 0 0 17.7 0 ... #&gt; $ Chuva21 : num 0 0 0 0 20.5 3.2 0 0 0 0 ... #&gt; $ Chuva22 : num 67.5 0 0 0 0 3 0 0 0 0 ... #&gt; $ Chuva23 : num 12.3 0 0 0 0 0 0 0 0 14 ... #&gt; $ Chuva24 : num 0 8.2 0 0 0 33.5 0 0 0 40 ... #&gt; $ Chuva25 : num 0 2.5 0 5.9 1.3 0 0 0 0 1 ... #&gt; $ Chuva26 : num 0 0 0 0 0 0 1.1 0 0 5.4 ... #&gt; $ Chuva27 : num 0 0 0 0 0 0 5.9 0 0 0 ... #&gt; $ Chuva28 : num 0 0 0 0 14 1 0 0 0 0 ... #&gt; $ Chuva29 : num 0 NA 0 0 30.5 0 0 0 0 0 ... #&gt; $ Chuva30 : num 0 NA 23.5 0 0 0 0 30.3 0 0 ... #&gt; $ Chuva31 : num 0 NA 21.5 NA 0 NA 0 1.8 NA 0 ... #&gt; $ Chuva01Status : int 0 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva02Status : int 0 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva03Status : int 0 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva04Status : int 0 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva05Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva06Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva07Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva08Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva09Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva10Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva11Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva12Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva13Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva14Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva15Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva16Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva17Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva18Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva19Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva20Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva21Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva22Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva23Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva24Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva25Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva26Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva27Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva28Status : int 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva29Status : int 1 0 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva30Status : int 1 0 1 1 1 1 1 1 1 1 ... #&gt; $ Chuva31Status : int 1 0 1 0 1 0 1 1 0 1 ... #&gt; $ X : logi NA NA NA NA NA NA ... # exporta para arquivo texto separado por tab dprec_file &lt;- paste0(tempfile(), &quot;.tsv&quot;) export(dprec, file = dprec_file, na = &quot;-999&quot;) #export(dprec, file = &quot;../output-adar/dprec.tsv&quot;, na = &quot;-999&quot;) Na há necesida de especificar o argumento format das funções import() e export() pois o formato é inferido da extensão do arquivo (csv, no exemplo acima). Você deve especificar o formato somente quando o arquivo estiver salvo em uma extensão não reconhecida pelo rio (ver tabela de formatos acima). 8.4.1.1 Arquivos formatados com largura fixa Alguns arquivos texto com dados tabulares podem não conter separadores para economizar espaço de disco. Outros arquivos podem ser formatados usando largura fixa para reservar o espaço de cada variável, o que facilita a legibilidade dos dados. Vamos usar como exemplo o arquivo de dados do Índice de Oscilação Sul (SOI) obtido no site do National Weather Service - Climate Prediction Center (NWS-CPC). # link para os dados do SOI link &lt;- &quot;http://www.cpc.ncep.noaa.gov/data/indices/soi&quot; Abrindo o link dos dados no navegador para visualização do formato. browseURL(url = link) Leitura dos dados: soi &lt;- import( file = link, format = &quot;fwf&quot;, skip = 4, # pula 4 linhas header = FALSE, # sem cabeçalho nrows = 70, # num. de linhas widths = c(4, rep(6, 12)), # largura dos campos das variáveis na.strings = &quot;-999.9&quot;, # string para dados faltantes col.names = scan(link, # varredura do arquivo # col.names = scan(link, # varredura do arquivo what = &quot;character&quot;, # tipo dos dados a serem lidos skip = 3, # pula 3 linhas nmax = 13 ) # num. max de registros a serem lidos ) str(soi) #&gt; &#39;data.frame&#39;: 70 obs. of 13 variables: #&gt; $ YEAR: int 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 ... #&gt; $ JAN : num 2.5 -1.5 0.5 1.1 -0.9 2.2 1 -3.1 -1.5 0.2 ... #&gt; $ FEB : num 1.5 -1 -0.8 -0.5 3.1 2.7 -0.1 -0.8 -2.3 0.2 ... #&gt; $ MAR : num -0.2 0.9 -0.3 0.4 1.1 2.2 0.3 0.4 2.1 1.7 ... #&gt; $ APR : num -0.5 -0.4 0.3 1.1 -0.2 1.5 0.4 0.6 0.7 1.3 ... #&gt; $ MAY : num -1.1 1.2 -2.8 0.8 1.7 2.3 -1.1 -0.8 0.8 0.9 ... #&gt; $ JUN : num 0.3 1.2 0.2 0.2 2.2 1.8 0.3 0.5 -0.2 0.2 ... #&gt; $ JUL : num -1.7 0.8 0 0.7 2.6 1.8 0.4 0.7 -0.4 0.8 ... #&gt; $ AUG : num -0.4 0.1 -2 1.8 2.4 2 -0.8 1.5 -0.2 1.3 ... #&gt; $ SEP : num -1.8 -0.4 -2.1 0.3 2.2 0.1 -1.5 -0.5 0 1.1 ... #&gt; $ OCT : num -1.6 0.6 0.1 0.4 2.5 2.9 0.1 0.1 0.8 0.2 ... #&gt; $ NOV : num -1.3 0 -0.5 0.2 2 0.2 -1.6 -0.7 1.5 0.9 ... #&gt; $ DEC : num -1.2 -2 -0.8 2.3 1.6 1.8 -0.5 -1 1.5 1.3 ... tail(soi) #&gt; YEAR JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC #&gt; 65 2015 -1.4 0.4 -1.2 -0.1 -1.2 -0.9 -1.9 -2.4 -2.7 -2.8 -0.8 -0.9 #&gt; 66 2016 -3.6 -3.2 -0.1 -2.0 0.7 1.1 0.7 1.2 2.0 -0.4 -0.2 0.5 #&gt; 67 2017 0.3 -0.1 1.5 -0.3 0.4 -0.7 1.3 0.9 1.0 1.5 1.5 -0.2 #&gt; 68 2018 1.8 -0.8 2.4 0.8 NA NA NA NA NA NA NA NA #&gt; 69 2019 NA NA NA NA NA NA NA NA NA NA NA NA #&gt; 70 2020 NA NA NA NA NA NA NA NA NA NA NA NA Conforme o manual de ajuda da função import() do rio, no arquivo acima foi usada a função read.fwf() do R para ler os dados. Vamos alterar a estrutura dos dados: ao invés dos dados serem distribuídos ao longo das colunas, vamos estruturá-los como série temporal, ou seja cada valor mensal corresponderá a uma linha. # converte a matriz de dados para um vetor (em sequencia cronológica) soi_v &lt;- c(t(soi[, -1])) # criando um dataframe com valores de SOI, mes e ano soi_df &lt;- data.frame( ano = rep(soi$YEAR, each = 12), mes = rep(1:12, length(soi[, 1])), soi = soi_v ) head(soi_df) #&gt; ano mes soi #&gt; 1 1951 1 2.5 #&gt; 2 1951 2 1.5 #&gt; 3 1951 3 -0.2 #&gt; 4 1951 4 -0.5 #&gt; 5 1951 5 -1.1 #&gt; 6 1951 6 0.3 # escrevendo dados SOI em um arquivo CSV soi_file &lt;- paste0(tempfile(), &quot;.csv&quot;) export(soi_df, file = soi_file, na = &quot;-999.9&quot; ) Vamos ler os dados reestruturados que foram salvos no formato csv usando uma função que permite a escolha do arquivo de forma iterativa. # leitura de dados com escolha interativa do arquivo soi.df &lt;- import(file.choose(), # file.choose só é válido em sistema *unix # no windows é choose.file() header = TRUE, na.strings = &quot;-999.9&quot; ) Navegue ate o diretoriodo arquivo e clique duas vezes sobre o arquivo SOI.csv. head(soi.df) #&gt; ano mes soi #&gt; 1 1951 1 2.5 #&gt; 2 1951 2 1.5 #&gt; 3 1951 3 -0.2 #&gt; 4 1951 4 -0.5 #&gt; 5 1951 5 -1.1 #&gt; 6 1951 6 0.3 str(soi.df) #&gt; &#39;data.frame&#39;: 840 obs. of 3 variables: #&gt; $ ano: int 1951 1951 1951 1951 1951 1951 1951 1951 1951 1951 ... #&gt; $ mes: int 1 2 3 4 5 6 7 8 9 10 ... #&gt; $ soi: num 2.5 1.5 -0.2 -0.5 -1.1 0.3 -1.7 -0.4 -1.8 -1.6 ... 8.4.2 Arquivos texto não estruturados Em alguns casos é necessário ler arquivos textos sem uma estrutura definida como no caso de arquivos delimitados. Se o arquivo não é bem estruturado é mais fácil ler cada linha de texto separadamente e depois decompor e manipular o conteúdo do texto. A função readLines() é adequada para isso. Cada linha é tratada como um elemento de um vetor do tipo character. Vamos importar os dados do INMET, mas dessa vez vamos focar no cabeçalho, onde estão as informações da estação meteorológica. Obtendo os dados # arquivo de exemplo disponível no GitHub bdmep_url_file &lt;- &quot;https://raw.githubusercontent.com/lhmet/adar-ufsm/master/data/83004.txt&quot; # leitura do cabecalho do arquivo de dados de uma estação do inmet cab &lt;- readLines(bdmep_url_file) head(cab) #&gt; [1] &quot;--------------------&quot; #&gt; [2] &quot;BDMEP - INMET&quot; #&gt; [3] &quot;--------------------&quot; #&gt; [4] &quot;Estação : SAO PAULO IAG - SP (OMM: 83004)&quot; #&gt; [5] &quot;Latitude (graus) : -23.65&quot; #&gt; [6] &quot;Longitude (graus) : -46.61&quot; # somente linhas com coordenadas da estação cab[5:7] #&gt; [1] &quot;Latitude (graus) : -23.65&quot; &quot;Longitude (graus) : -46.61&quot; #&gt; [3] &quot;Altitude (metros): 800.00&quot; is.vector(cab[5:7]) #&gt; [1] TRUE # arranjando em coluna cbind(cab[5:7]) #&gt; [,1] #&gt; [1,] &quot;Latitude (graus) : -23.65&quot; #&gt; [2,] &quot;Longitude (graus) : -46.61&quot; #&gt; [3,] &quot;Altitude (metros): 800.00&quot; # selecionando somente os dados e o nome das variáveis cab[-c(1:15)][1:10] #&gt; [1] &quot;Estacao;Data;Hora;Precipitacao;TempBulboSeco;TempBulboUmido;TempMaxima;TempMinima;UmidadeRelativa;PressaoAtmEstacao;PressaoAtmMar;DirecaoVento;VelocidadeVentoInsolacao;Nebulosidade;Evaporacao Piche;Temp Comp Media;Umidade Relativa Media;Velocidade do Vento Media;&quot; #&gt; [2] &quot;83004;02/08/1993;0000;;;;;;;;;;;;;1.4;;;;&quot; #&gt; [3] &quot;83004;01/01/1995;0000;;;;26.8;;;;;;;1.5;;1.6;22.04;86.75;2;&quot; #&gt; [4] &quot;83004;01/01/1995;1200;21.2;22.5;20;;19.5;80;924.6;;32;4;;10;;;;;&quot; #&gt; [5] &quot;83004;01/01/1995;1800;;25.2;21.5;;;73;922.9;;32;2;;10;;;;;&quot; #&gt; [6] &quot;83004;02/01/1995;0000;;20.7;20.3;28.9;;97;924.2;;0;0;1.3;10;1.1;23.32;83;2.666667;&quot; #&gt; [7] &quot;83004;02/01/1995;1200;3.2;23.8;20.6;;19.9;76;924.7;;32;3;;10;;;;;&quot; #&gt; [8] &quot;83004;02/01/1995;1800;;26.4;21.6;;;66;921.5;;32;5;;10;;;;;&quot; #&gt; [9] &quot;83004;03/01/1995;0000;;22;21.4;25.4;;95;922.7;;0;0;0.2;10;1.3;22.54;93.5;1;&quot; #&gt; [10] &quot;83004;03/01/1995;1200;4.4;23;21.3;;20.7;86;923.6;;0;0;;10;;;;;&quot; # escrevendo dados com writeLines file_83004_limpo &lt;- paste0(tempfile(), &quot;.txt&quot;) writeLines(text = cab[-c(1:15)] , con = file_83004_limpo) #writeLines(text = cab[-c(1:15)] , con = &quot;../output-adar/83004_limpo.txt&quot;) A função writeLines() escreve os elementos do vetor de caracteres um de cada vez em um arquivo texto. "],
["arquivos-binarios.html", "8.5 Arquivos binários", " 8.5 Arquivos binários Arquivo texto favorecem a legibilidade humana dos dados mas tem limitada precisão numérica limitada. Formatos binários diminuem substancialmente o tamanho, o tempo de leitura e escrita de arquivos. Por isso, vários softwares armazenam dados no formato binário. Após a leitura e o processamento de dados brutos você provavelmente os salvará para uso futuro. Este procedimento é recomendado para evitar de ter que repetir todo processamento novamente. Para dados que ocupam espaço significativo (por exemplo com mais de 1 milhão de linhas) é mais eficiente salvar os dados em um formato binário, uma vez que dessa forma os tempos de escrita e leitura dos dados é menor. 8.5.1 Formatos binários nativos do R 8.5.1.1 Rdata Para mostrar como usar as funções save() e load() vamos utilizar os dados pluviométricos lidos anteriormente (dprec) e selecionar as colunas de interesse. O dataframe será salvo em um arquivo binário do R com a extensão .RData. # primeiras linhas head(dprec[, 1:10]) #&gt; X..EstacaoCodigo NivelConsistencia Data TipoMedicaoChuvas Maxima #&gt; 1 3054002 1 01/01/1934 1 NA #&gt; 2 3054002 1 01/02/1934 1 66.3 #&gt; 3 3054002 1 01/03/1934 1 55.0 #&gt; 4 3054002 1 01/04/1934 1 54.5 #&gt; 5 3054002 1 01/05/1934 1 30.5 #&gt; 6 3054002 1 01/06/1934 1 42.5 #&gt; Total DiaMaxima NumDiasDeChuva MaximaStatus TotalStatus #&gt; 1 NA NA NA 0 0 #&gt; 2 174.7 6 10 1 1 #&gt; 3 160.7 9 10 1 1 #&gt; 4 98.4 1 4 1 1 #&gt; 5 119.4 29 8 1 1 #&gt; 6 191.6 13 11 1 1 # selecionando somente dados diarios do dia 1 a 31 de cada ano chuva_df &lt;- dprec[, c(3, 14:44)] # arquivo binario do R file_chuva_df &lt;- paste0(tempfile(), &quot;.RData&quot;) save(chuva_df, file = file_chuva_df) #save(chuva_df, file = &quot;../output-adar/chuva_df.RData&quot;) # verificando se arquivo foi salvo no diretório file.exists(file_chuva_df) #&gt; [1] TRUE Como o objeto chuva_df foi salvo em um arquivo, vamos removê-lo e então recuperá-lo carregando os dados armazenado no arquivo chuva_df.RData. # apagando chuva_df do ambiente de trabalho rm(chuva_df) # verifica existência de objeto exists(chuva_df) #&gt; Error in exists(chuva_df): object &#39;chuva_df&#39; not found # carregando chuva_df load(file = file_chuva_df) ls() #&gt; [1] &quot;bdmep_url_file&quot; &quot;cab&quot; &quot;chuva_df&quot; #&gt; [4] &quot;dprec&quot; &quot;dprec_file&quot; &quot;file_83004_limpo&quot; #&gt; [7] &quot;file_chuva_df&quot; &quot;hidroweb_dest_file&quot; &quot;hidroweb_url_file&quot; #&gt; [10] &quot;link&quot; &quot;pacotes&quot; &quot;pcks&quot; #&gt; [13] &quot;rblue&quot; &quot;soi&quot; &quot;soi_df&quot; #&gt; [16] &quot;soi.df&quot; &quot;soi_file&quot; &quot;soi_v&quot; # para carregar os dados e saber o nome com que foram salvos print(load(file = file_chuva_df)) #&gt; [1] &quot;chuva_df&quot; head(chuva_df[, 1:10]) #&gt; Data Chuva01 Chuva02 Chuva03 Chuva04 Chuva05 Chuva06 Chuva07 #&gt; 1 01/01/1934 NA NA NA NA 10.5 3.0 11.1 #&gt; 2 01/02/1934 15.5 3.5 0.0 0.0 11.9 66.3 1.0 #&gt; 3 01/03/1934 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #&gt; 4 01/04/1934 54.5 0.0 0.0 0.0 0.0 18.5 0.0 #&gt; 5 01/05/1934 0.0 19.0 26.7 0.0 3.2 4.2 0.0 #&gt; 6 01/06/1934 0.0 0.0 21.5 12.7 8.7 0.0 0.0 #&gt; Chuva08 Chuva09 #&gt; 1 0.0 0 #&gt; 2 40.0 0 #&gt; 3 0.0 55 #&gt; 4 19.5 0 #&gt; 5 0.0 0 #&gt; 6 0.0 0 Um vantagem desse formato é que os objetos criados podem ser lidos pelo R independente do sistema operacional e da arquitetura do computador, tornando muito prático o acesso aos dados. Cada vez que uma sessão do R é finalizada, uma janela surge perguntando se deseja salvar o espaço de trabalho (save the workspace image), que nada mais é do que um arquivo binário chamado .RData no diretório de trabalho. Assim quando iniciar a sessão se o arquivo .RData estiver no diretório de trabalho ele será automaticamente carregado tornando todos os objetos da última sessão disponíveis novamente. Se você deseja salvar o espaço de trabalho em outro momento use a função save.image(). Quando desejamos salvar só uma parte dos dados uma opção é usar a função rm() (uma abreviação de remove) para remover objetos que não são de interesse antes de finalizar a sessão do R. A função save()permite salvar mais de um objeto em um mesmo arquivo. file_dados_prec &lt;- paste0(tempfile(), &quot;.Rdata&quot;) save(cab, chuva_df, file = file_dados_prec) #save(cab, chuva_df, file = &quot;../output-adar/dados_prec.RData&quot;) ls() #&gt; [1] &quot;bdmep_url_file&quot; &quot;cab&quot; &quot;chuva_df&quot; #&gt; [4] &quot;dprec&quot; &quot;dprec_file&quot; &quot;file_83004_limpo&quot; #&gt; [7] &quot;file_chuva_df&quot; &quot;file_dados_prec&quot; &quot;hidroweb_dest_file&quot; #&gt; [10] &quot;hidroweb_url_file&quot; &quot;link&quot; &quot;pacotes&quot; #&gt; [13] &quot;pcks&quot; &quot;rblue&quot; &quot;soi&quot; #&gt; [16] &quot;soi_df&quot; &quot;soi.df&quot; &quot;soi_file&quot; #&gt; [19] &quot;soi_v&quot; rm(cab, chuva_df) ls() #&gt; [1] &quot;bdmep_url_file&quot; &quot;dprec&quot; &quot;dprec_file&quot; #&gt; [4] &quot;file_83004_limpo&quot; &quot;file_chuva_df&quot; &quot;file_dados_prec&quot; #&gt; [7] &quot;hidroweb_dest_file&quot; &quot;hidroweb_url_file&quot; &quot;link&quot; #&gt; [10] &quot;pacotes&quot; &quot;pcks&quot; &quot;rblue&quot; #&gt; [13] &quot;soi&quot; &quot;soi_df&quot; &quot;soi.df&quot; #&gt; [16] &quot;soi_file&quot; &quot;soi_v&quot; # carrega e imprime na tela nome dos dados carregados print(load(file_dados_prec)) #&gt; [1] &quot;cab&quot; &quot;chuva_df&quot; ls() #&gt; [1] &quot;bdmep_url_file&quot; &quot;cab&quot; &quot;chuva_df&quot; #&gt; [4] &quot;dprec&quot; &quot;dprec_file&quot; &quot;file_83004_limpo&quot; #&gt; [7] &quot;file_chuva_df&quot; &quot;file_dados_prec&quot; &quot;hidroweb_dest_file&quot; #&gt; [10] &quot;hidroweb_url_file&quot; &quot;link&quot; &quot;pacotes&quot; #&gt; [13] &quot;pcks&quot; &quot;rblue&quot; &quot;soi&quot; #&gt; [16] &quot;soi_df&quot; &quot;soi.df&quot; &quot;soi_file&quot; #&gt; [19] &quot;soi_v&quot; 8.5.1.2 RDS As funções readRDS() e writeRDS() são similares a load() e save(), respectivamente, exceto que elas lidam com um único objeto. Em contrapartida elas possuem a flexibilidade nomear o objeto lido com um nome diferente do qual ele foi salvo. Vamos alterar o formato da data do dataframe chuva_df e salvá-lo no arquivo chuva_df.rds. # salvar dados em um arquivo rds head(chuva_df[, 1:10]) #&gt; Data Chuva01 Chuva02 Chuva03 Chuva04 Chuva05 Chuva06 Chuva07 #&gt; 1 01/01/1934 NA NA NA NA 10.5 3.0 11.1 #&gt; 2 01/02/1934 15.5 3.5 0.0 0.0 11.9 66.3 1.0 #&gt; 3 01/03/1934 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #&gt; 4 01/04/1934 54.5 0.0 0.0 0.0 0.0 18.5 0.0 #&gt; 5 01/05/1934 0.0 19.0 26.7 0.0 3.2 4.2 0.0 #&gt; 6 01/06/1934 0.0 0.0 21.5 12.7 8.7 0.0 0.0 #&gt; Chuva08 Chuva09 #&gt; 1 0.0 0 #&gt; 2 40.0 0 #&gt; 3 0.0 55 #&gt; 4 19.5 0 #&gt; 5 0.0 0 #&gt; 6 0.0 0 # alterando formato de datas da coluna Data chuva_df$Data &lt;- as.Date(x = chuva_df$Data, format = &quot;%d/%m/%Y&quot;) file_rds_chuva_df &lt;- paste0(tempfile(), &quot;.RDS&quot;) saveRDS(object = chuva_df, file = file_rds_chuva_df) file.exists(file_rds_chuva_df) #&gt; [1] TRUE Após salvar o dataframe chuva_df vamos removê-lo do ambiente da sessão e recuperá-lo com a função readRDS(). # removendo chuva_df do ambiente rm(chuva_df) # recuperando dados do arquivo em uma variável com nome diferente do original prec_ana &lt;- readRDS(file_rds_chuva_df) head(prec_ana[, 1:10]) #&gt; Data Chuva01 Chuva02 Chuva03 Chuva04 Chuva05 Chuva06 Chuva07 #&gt; 1 1934-01-01 NA NA NA NA 10.5 3.0 11.1 #&gt; 2 1934-02-01 15.5 3.5 0.0 0.0 11.9 66.3 1.0 #&gt; 3 1934-03-01 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #&gt; 4 1934-04-01 54.5 0.0 0.0 0.0 0.0 18.5 0.0 #&gt; 5 1934-05-01 0.0 19.0 26.7 0.0 3.2 4.2 0.0 #&gt; 6 1934-06-01 0.0 0.0 21.5 12.7 8.7 0.0 0.0 #&gt; Chuva08 Chuva09 #&gt; 1 0.0 0 #&gt; 2 40.0 0 #&gt; 3 0.0 55 #&gt; 4 19.5 0 #&gt; 5 0.0 0 #&gt; 6 0.0 0 8.5.2 NetCDF sudo apt-get update sudo apt-get upgrade --assume-yes ## Install 3rd parties for NetCDF sudo apt-get install libnetcdf-dev libudunits2-dev ## install 3rd parties needed for devtools + openssl git2r httr #sudo apt-get install libssl-dev "],
["para-saber-mais.html", "8.6 Para saber mais", " 8.6 Para saber mais Para uma descrição mais abrangente sobre importação e exportação de dados no consulte o manual R Data Import/Export e a documentação de ajuda das funções citadas naquele documento. "]
]
