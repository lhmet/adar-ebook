[
["data-wrangle.html", "9 Processamento de dados", " 9 Processamento de dados Neste capítulo veremos: um data frame aperfeiçoado, denominado tibble como arrumar seus dados em uma estrutura conveniente para a análise e visualização de dados como reestruturar os dados de uma forma versátil e fácil de entender como manipular os dados com uma ferramenta intuitiva e padronizada Existem diversas ferramentas da base do para a execução dessas operações. Entretanto, elas são um pouco confusas, não seguem uma codificação consistente e não possuem uma capacidade de fluirem juntas no processamento de dados. Muitas coisas no R que foram desenvolvidas e eram úteis há 20 anos, podem não ser a melhor forma de abordar um problema hoje. Mudanças nos códigos da base do R é uma tarefa complicado devido a cadeia de dependências do código fonte e dos pacotes de contribuidores. Então, grande parte das inovações estão ocorrendo na forma de pacotes. Suprindo a necessidade de uma abordagem efetiva e integrada para ciência de dados (Figura 9.1) um conjunto de pacotes foram desenvolvidos e denominado tidyverse. Figure 9.1: Modelo de ferramentas empregadas em ciência de dados. Adaptado de Wickham and Grolemund (2017). O termo tidyverse pode ser traduzido como ‘universo arrumado’ e consiste em um pacote do R que agrupa pacotes (Figura 9.1) que compartilham uma filosofia comun de design, gramática (Wickham et al. 2017) e estrutura de dados (Wickham 2014). Consequentemente, o tidyverse tem sido amplamente utilizado pela comunidade de usuários e desenvolvedores do R. Além de uma abordagem mais coesa e consistente de realizar as tarefas de processamento de dados, os códigos são mais eficientes (que a base do R), legíveis e a sintaxe mais fácil de lembrar. Figure 9.2: Coleção de pacotes do tidyverse. References "],
["pre-requisitos-2.html", "9.1 Pré-requisitos", " 9.1 Pré-requisitos O pacote tidyverse torna fácil de instalar e carregar os pacotes do tidyverse em apenas um comando. install.packages(&quot;tidyverse&quot;) Agora você pode carregar os pacotes. library(tidyverse) #&gt; + ggplot2 2.2.1 Date: 2018-06-11 #&gt; + tibble 1.4.2 R: 3.4.4 #&gt; + tidyr 0.8.0 OS: Ubuntu 14.04.5 LTS #&gt; + readr 1.1.1 GUI: X11 #&gt; + purrr 0.2.4 Locale: en_US.UTF-8 #&gt; + dplyr 0.7.4 TZ: America/Sao_Paulo #&gt; + stringr 1.3.1 #&gt; + forcats 0.2.0 #&gt; ── Conflicts ──────────────────────────────────────────────────── #&gt; * filter(), from dplyr, masks stats::filter() #&gt; * lag(), from dplyr, masks stats::lag() Dados climatológicos: library(rio) clima_file_url &lt;- &quot;https://github.com/lhmet/adar-ufsm/blob/master/data/clima-rs.RDS?raw=true&quot; # dados de exemplo clima_rs &lt;- rio:::import(clima_file_url, format = &quot;RDS&quot;) clima_rs #&gt; codigo estacao uf prec tmax #&gt; 1 83931 Alegrete RS 1492.2 25.4 #&gt; 2 83980 Bagé RS 1299.9 24.1 #&gt; 3 83941 Bento Gonçalves RS 1683.7 23.0 #&gt; 4 83919 Bom Jesus RS 1807.3 20.3 #&gt; 5 83963 Cachoeira do Sul RS 1477.1 25.1 #&gt; 6 83942 Caxias do Sul RS 1823.0 21.8 #&gt; 7 83912 Cruz Alta RS 1630.7 24.5 #&gt; 8 83964 Encruzilhada do Sul RS 1510.8 22.5 #&gt; 9 83915 Guaporé RS 1758.7 24.7 #&gt; 10 83881 Iraí RS 1806.7 27.1 #&gt; 11 83929 Itaqui RS 1369.4 26.2 #&gt; 12 83916 Lagoa Vermelha RS 1691.1 23.0 #&gt; 13 83880 Palmeira das Missões RS 1747.8 24.0 #&gt; 14 83914 Passo Fundo RS 1803.1 23.6 #&gt; 15 83967 Porto Alegre RS 1320.2 24.8 #&gt; 16 83995 Rio Grande RS 1233.6 21.7 #&gt; 17 83936 Santa Maria RS 1616.8 24.9 #&gt; 18 83997 Santa Vitória do Palmar RS 1228.9 21.8 #&gt; 19 83957 São Gabriel RS 1313.9 25.0 #&gt; 20 83907 São Luiz Gonzaga RS 1770.9 26.1 #&gt; 21 83966 Tapes RS 1349.8 23.8 #&gt; 22 83948 Torres RS 1363.2 22.3 #&gt; 23 83927 Uruguaiana RS 1647.4 25.8 Dados de estação meteorológicas: meteo_df &lt;- data.frame(site = c( &quot;A001&quot;, &quot;A001&quot;, &quot;A002&quot;, &quot;A002&quot;, &quot;A002&quot;, &quot;A003&quot;, &quot;A803&quot;, &quot;A803&quot; ), ano = c(2000:2001, 2000:2002, 2004, 2005, 2006), prec = c(1800, 1400, 1750, 1470, 1630, 1300, 1950, 1100) ) meteo_df #&gt; site ano prec #&gt; 1 A001 2000 1800 #&gt; 2 A001 2001 1400 #&gt; 3 A002 2000 1750 #&gt; 4 A002 2001 1470 #&gt; 5 A002 2002 1630 #&gt; 6 A003 2004 1300 #&gt; 7 A803 2005 1950 #&gt; 8 A803 2006 1100 "],
["tibbles-data-frames-aperfeicoado.html", "9.2 tibbles: data frames aperfeiçoado", " 9.2 tibbles: data frames aperfeiçoado Data frames são unidade fundamental de armazenamento de dados retangulares no R. O pacote tibble define uma nova classe de data frame para o R, o tbl_df (‘tibble diffs’). Uma tibble é uma extensão da classe de dados data.frame da base do R, que inclui aperfeiçoamentos relacionados a impressão de dados (mais amigável e versátil), a seleção de dados e a manipulação de dados do tipo factor. Para criar um tibble nós usamos a função tibble(). Para ilustrar algumas vantagens do tibble vamos recriar o data frame meteo_df incluindo uma nova variável int prec(intensidade da precipitação): meteo_tbl &lt;- tibble(site = c( &quot;A001&quot;, &quot;A001&quot;, &quot;A002&quot;, &quot;A002&quot;, &quot;A002&quot;, &quot;A003&quot;, &quot;A803&quot;, &quot;A803&quot; ), ano = c(2000:2001, 2000:2002, 2004, 2005, 2006), prec = c(1800, 1400, 1750, 1470, 1630, 1300, 1950, 1100), `int prec` = prec/365 ) meteo_tbl #&gt; # A tibble: 8 x 4 #&gt; site ano prec `int prec` #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 A001 2000 1800 4.93 #&gt; 2 A001 2001 1400 3.84 #&gt; 3 A002 2000 1750 4.79 #&gt; 4 A002 2001 1470 4.03 #&gt; 5 A002 2002 1630 4.47 #&gt; 6 A003 2004 1300 3.56 #&gt; 7 A803 2005 1950 5.34 #&gt; 8 A803 2006 1100 3.01 No exemplo acima, as principais diferenças entre o tibble e o data frame ficam evidentes: quando impresso no console do R, o tibble mostra a classe de cada variável, enquanto objetos data.frame não. vetores caracteres não são interpretados como factors quando incorparados em um tibble, em contraste, data.frame() faz a coerção de caracteres para factors, o que pode causar problemas nas etapas de processamento futuras. o nome das variáveis nunca são modificados data.frame(&quot;nome esquisito&quot; = 1) #&gt; nome.esquisito #&gt; 1 1 permite usar seus próprios argumentos prévios para definir variáveis durante a criação do tibble. nunca adiciona nome às linhas (row.names) Quando um tibble é impresso na tela, somente as dez primeiras linhas são mostradas. O número de colunas mostradas depende do tamanho da janela. Outras diferenças do tibble podem ser consultada no página de ajuda da função tibble() (?tibble) e na vinheta do referido pacote (vignette(&quot;tibble&quot;)). A conversão de um data.frame para tibble pode ser feita simplesmente com a função as_tibble(): meteo_tbl_conv &lt;- as_tibble(meteo_df) meteo_tbl_conv #&gt; # A tibble: 8 x 3 #&gt; site ano prec #&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 A001 2000 1800 #&gt; 2 A001 2001 1400 #&gt; 3 A002 2000 1750 #&gt; 4 A002 2001 1470 #&gt; 5 A002 2002 1630 #&gt; 6 A003 2004 1300 #&gt; 7 A803 2005 1950 #&gt; 8 A803 2006 1100 As opções de controle default da impressão de tibbles na tela são controladas através da função de opções de configuração: options( tibble.print_max = n, tibble.print_min = m) Onde se o número de linhas do tibble for maior que m linhas, a impressão será somente até n linhas. Você pode usar options(dplyr.print_min = Inf) se deseja que sempre sejam mostradas todas linhas de seus dados. Finalmente é bom lembrar da opção de visualização completa dos dados do RStudio através da função View(). "],
["operador-pipe.html", "9.3 Operador Pipe %&gt;%", " 9.3 Operador Pipe %&gt;% Isso leva a uma dificuldade de ler funções aninhadas e um código desordenado. Embora não requerido os pacotes tidyr e dplyr usam o operador pipe %&gt;% que quando combinado com vários funções forma uma cadeia de processamento de dados, ao invés do aninhamento de funções que limita a legibilidade do código. # exemplo simples para aplicar uma função quadrado &lt;- function(x) x^2 a &lt;- 1:4 quadrado(a) [1] 1 4 9 16 a %&gt;% quadrado [1] 1 4 9 16 Este operador irá transmitir um valor, ou o resultado de uma expressão, para a próxima função/expressão chamada. Por exemplo, uma função para filtrar os dados pode ser escrito como: # exemplo com um dataframe data(airquality) filter(airquality, Ozone == 23) Ozone Solar.R Wind Temp Month Day 1 23 299 8.6 65 5 7 2 23 13 12.0 67 5 28 3 23 148 8.0 82 6 13 4 23 115 7.4 76 8 18 5 23 220 10.3 78 9 8 6 23 14 9.2 71 9 22 # ou airquality %&gt;% filter(Ozone == 23) Ozone Solar.R Wind Temp Month Day 1 23 299 8.6 65 5 7 2 23 13 12.0 67 5 28 3 23 148 8.0 82 6 13 4 23 115 7.4 76 8 18 5 23 220 10.3 78 9 8 6 23 14 9.2 71 9 22 Ambas funções realizam a mesma tarefa e o benefício de usar `%&gt;%’não é evidente. Entretanto, quando desejamos realizar várias funções sua vantagem torna-se evidente. "],
["restruturacao-de-dados.html", "9.4 Restruturação de dados", " 9.4 Restruturação de dados 9.4.1 Dados arrumados asd 9.4.2 tidyr asd "],
["manipulacao-de-dados.html", "9.5 Manipulação de dados", " 9.5 Manipulação de dados Gramática de manipulação de dados. 9.5.1 dplyr 5 verbos básicos: select() filter() arrange() mutate() group_by() e summarise() "]
]
